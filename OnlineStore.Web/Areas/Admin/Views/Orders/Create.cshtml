<script src="~/assets/admin/js/jquery-ui.min.js"></script>
<link href="~/assets/admin/css/jquery-ui.min.css" rel="stylesheet" />
<script src="~/assets/admin/js/app/order/edit.js"></script>

@using OnlineStore.Data.Entities
@model OnlineStore.Data.Entities.Order
@{
    ViewBag.Module = "Đơn hàng";
    ViewBag.Title = "Tạo mới";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

    var PaymentObjects = (List<SelectListItem>)ViewBag.PaymentObjects;
    var PaymentMethods = (List<SelectListItem>)ViewBag.PaymentMethods;
    var DeliveryMethods = (List<SelectListItem>)ViewBag.DeliveryMethods;
    var Statuses = (List<SelectListItem>)ViewBag.Statuses;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentObject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="radio-inline">
                    <label>
                        <input name="PaymentObject" value="Khách vãng lai" checked type="radio" class="ace" />
                        <span class="lbl">Khách vãng lai</span>
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        <input name="PaymentObject" value="Khách đã tồn tại" type="radio" class="ace" />
                        <span class="lbl">Khách đã tồn tại</span>
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.PaymentObject, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Khách vãng lai -->
        <div class="form-group customer-anonymous">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- PaymentObject -->
        <div class="form-group customer-existed">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="CustomerId" class="slCustomer form-control">
                    @{
                        var customers = (List<Customer>)ViewBag.Customers;

                        foreach (var customer in customers)
                        {
                            <option value="@customer.Id">@customer.Name</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentMethod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PaymentMethod, PaymentMethods, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PaymentMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DeliveryMethod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.DeliveryMethod, DeliveryMethods, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DeliveryMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Telephone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="CityId" class="slCity form-control">
                    @{
                        var cities = (List<City>)ViewBag.Cities;

                        foreach (var city in cities)
                        {
                            <option value="@city.Id">@city.Name</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Note, new { htmlAttributes = new { @class = "form-control", @style = "width:100%;" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Status, Statuses, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Tạo mới" class="btn btn-default" />
            </div>
        </div>
    </div>
    }
<div>
    <i class="ace-icon fa fa-reply icon-only"></i> @Html.ActionLink("Trở về trang chủ", "Index")
</div>

<script>
    $(document).ready(function () {
        $(".slCustomer").select2({
            placeholder: "Chọn khách hàng",
            allowClear: true
        });

        $(".slCity").select2({
            placeholder: "Chọn thành phố",
            allowClear: true
        });

        $(".slCustomer").on("select2:select", function () {
            UpdateCustomerInfo($(this).val());
        });

        //Toggle customer
        CheckIfCustomerIsExisted();
        $('input[name="PaymentObject"]').change(function () {
            CheckIfCustomerIsExisted();
        })
    });

    function CheckIfCustomerIsExisted()
    {
        var customerId = $(".slCustomer").val();
        var customerType = $('input[name="PaymentObject"]:checked').val();
        console.log(customerType);
        if (customerType == "Khách đã tồn tại") {
            $(".customer-anonymous").hide();
            $(".customer-existed").show();
            UpdateCustomerInfo(customerId);
        }
        else
        {
            $(".customer-anonymous").show();
            $(".customer-existed").hide();
        }
    }

    function UpdateCustomerInfo(customerId)
    {
        $('#loading-container').empty().append(loadingContent);
        $.ajax({
            type: "GET",
            url: "/Admin/Customers/GetCustomer",
            data: { customerId: customerId},
            success: function (customer) {
                SetCustomerInfo(customer)
                $("#loadingContent").remove();
            },
            error: function (xhr, textStatus, error) {
                toastr.error(error);
                $("#loadingContent").remove();
            }
        });
    }

    function SetCustomerInfo(customer) {
        $("#Telephone").val(customer.Telephone);
        $("#Email").val(customer.Email);
        $("#Address").val(customer.Address);
        $("#PostalCode").val(customer.PostalCode);
        $("#Note").val(customer.Note);
        $(".slCity").val(customer.CityId).trigger('change');
    }
</script>
